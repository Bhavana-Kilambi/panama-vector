import jdk.incubator.vector.*;
import jdk.internal.vm.annotation.ForceInline;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.annotations.DataProvider;

import java.lang.invoke.MethodHandles;
import java.lang.invoke.VarHandle;
import java.util.Arrays;
import java.util.List;
import java.nio.*;
import java.util.function.IntFunction;
import jdk.incubator.vector.VectorShape;
import jdk.incubator.vector.VectorSpecies;

/**
 * @test
 * @modules jdk.incubator.vector
 * @modules java.base/jdk.internal.vm.annotation
 * @run testng/othervm  -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED
 *      VectorConversionTests
 */

@Test
public class VectorConversionTests {
   static final int INVOC_COUNT = Integer.getInteger("jdk.incubator.vector.test.loop-iterations", 1000);

   static final VectorSpecies<Integer> ispec64 = IntVector.SPECIES_64;
   static final VectorSpecies<Float> fspec64 = FloatVector.SPECIES_64;
   static final VectorSpecies<Long> lspec64 = LongVector.SPECIES_64;
   static final VectorSpecies<Double> dspec64 = DoubleVector.SPECIES_64;
   static final VectorSpecies<Byte> bspec64 = ByteVector.SPECIES_64;
   static final VectorSpecies<Short> sspec64 = ShortVector.SPECIES_64;
 
   static final VectorSpecies<Integer> ispec128 = IntVector.SPECIES_128;
   static final VectorSpecies<Float> fspec128 = FloatVector.SPECIES_128;
   static final VectorSpecies<Long> lspec128 = LongVector.SPECIES_128;
   static final VectorSpecies<Double> dspec128 = DoubleVector.SPECIES_128;
   static final VectorSpecies<Byte> bspec128 = ByteVector.SPECIES_128;
   static final VectorSpecies<Short> sspec128 = ShortVector.SPECIES_128;
 
   static final VectorSpecies<Integer> ispec256 = IntVector.SPECIES_256;
   static final VectorSpecies<Float> fspec256 = FloatVector.SPECIES_256;
   static final VectorSpecies<Long> lspec256 = LongVector.SPECIES_256;
   static final VectorSpecies<Double> dspec256 = DoubleVector.SPECIES_256;
   static final VectorSpecies<Byte> bspec256 = ByteVector.SPECIES_256;
   static final VectorSpecies<Short> sspec256 = ShortVector.SPECIES_256;
 
   static final VectorSpecies<Integer> ispec512 = IntVector.SPECIES_512;
   static final VectorSpecies<Float> fspec512 = FloatVector.SPECIES_512;
   static final VectorSpecies<Long> lspec512 = LongVector.SPECIES_512;
   static final VectorSpecies<Double> dspec512 = DoubleVector.SPECIES_512;
   static final VectorSpecies<Byte> bspec512 = ByteVector.SPECIES_512;
   static final VectorSpecies<Short> sspec512 = ShortVector.SPECIES_512;
 
   static final VectorSpecies<Integer> ispecMax = IntVector.SPECIES_MAX;
   static final VectorSpecies<Float> fspecMax = FloatVector.SPECIES_MAX;
   static final VectorSpecies<Long> lspecMax = LongVector.SPECIES_MAX;
   static final VectorSpecies<Double> dspecMax = DoubleVector.SPECIES_MAX;
   static final VectorSpecies<Byte> bspecMax = ByteVector.SPECIES_MAX;
   static final VectorSpecies<Short> sspecMax = ShortVector.SPECIES_MAX;

   static VectorOperators.Conversion<Byte,Byte> B2B = VectorOperators.Conversion.ofCast(byte.class, byte.class);
   static VectorOperators.Conversion<Short,Short> S2S = VectorOperators.Conversion.ofCast(short.class, short.class);
   static VectorOperators.Conversion<Integer,Integer> I2I = VectorOperators.Conversion.ofCast(int.class, int.class);
   static VectorOperators.Conversion<Long,Long> L2L = VectorOperators.Conversion.ofCast(long.class, long.class);
   static VectorOperators.Conversion<Float,Float> F2F = VectorOperators.Conversion.ofCast(float.class, float.class);
   static VectorOperators.Conversion<Double,Double> D2D = VectorOperators.Conversion.ofCast(double.class, double.class);

   static VectorShape getMaxBit() {
        return VectorShape.S_Max_BIT;
    }

    static <T> IntFunction<T> withToString(String s, IntFunction<T> f) {
        return new IntFunction<T>() {
            @Override
            public T apply(int v) {
                return f.apply(v);
            }

            @Override
            public String toString() {
                return s;
            }
        };
    }

    interface ToByteF {
        byte apply(int i);
    }

    static byte[] fill_byte(int s , ToByteF f) {
        return fill_byte(new byte[s], f);
    }

    static byte[] fill_byte(byte[] a, ToByteF f) {
        for (int i = 0; i < a.length; i++) {
            a[i] = f.apply(i);
        }
        return a;
    }

    interface ToBoolF {
        boolean apply(int i);
    }

    static boolean[] fill_bool(int s , ToBoolF f) {
        return fill_bool(new boolean[s], f);
    }

    static boolean[] fill_bool(boolean[] a, ToBoolF f) {
        for (int i = 0; i < a.length; i++) {
            a[i] = f.apply(i);
        }
        return a;
    }

    interface ToShortF {
        short apply(int i);
    }


    static short[] fill_short(int s , ToShortF f) {
        return fill_short(new short[s], f);
    }

    static short[] fill_short(short[] a, ToShortF f) {
        for (int i = 0; i < a.length; i++) {
            a[i] = f.apply(i);
        }
        return a;
    }

    interface ToIntF {
        int apply(int i);
    }

    static int[] fill_int(int s , ToIntF f) {
        return fill_int(new int[s], f);
    }

    static int[] fill_int(int[] a, ToIntF f) {
        for (int i = 0; i < a.length; i++) {
            a[i] = f.apply(i);
        }
        return a;
    }

    interface ToLongF {
        long apply(int i);
    }
    static long[] fill_long(int s , ToLongF f) {
        return fill_long(new long[s], f);
    }

    static long[] fill_long(long[] a, ToLongF f) {
        for (int i = 0; i < a.length; i++) {
            a[i] = f.apply(i);
        }
        return a;
    }

    interface ToFloatF {
        float apply(int i);
    }

    static float[] fill_float(int s , ToFloatF f) {
        return fill_float(new float[s], f);
    }

    static float[] fill_float(float[] a, ToFloatF f) {
        for (int i = 0; i < a.length; i++) {
            a[i] = f.apply(i);
        }
        return a;
    }

    interface ToDoubleF {
        double apply(int i);
    }
   static double[] fill_double(int s , ToDoubleF f) {
        return fill_double(new double[s], f);
    }

    static double[] fill_double(double[] a, ToDoubleF f) {
        for (int i = 0; i < a.length; i++) {
            a[i] = f.apply(i);
        }
        return a;
    }

    static final List<IntFunction<byte[]>> BYTE_GENERATORS = List.of(
            withToString("byte(i)", (int s) -> {
                return fill_byte(s, i -> (byte)(i+1));
            })
    );

    @DataProvider
    public Object[][] byteUnaryOpProvider() {
        return BYTE_GENERATORS.stream().
                map(f -> new Object[]{f}).
                toArray(Object[][]::new);
    }

    static final List<IntFunction<boolean[]>> BOOL_GENERATORS = List.of(
        withToString("boolean(i%3)", (int s) -> {
            return fill_bool(s, i -> i % 3 == 0);
        })
    );
   @DataProvider
    public Object[][] booleanUnaryOpProvider() {
        return BOOL_GENERATORS.stream().
                map(f -> new Object[]{f}).
                toArray(Object[][]::new);
    }

    static final List<IntFunction<short[]>> SHORT_GENERATORS = List.of(
            withToString("short(i)", (int s) -> {
                return fill_short(s, i -> (short)(i*100+1));
            })
    );

    @DataProvider
    public Object[][] shortUnaryOpProvider() {
        return SHORT_GENERATORS.stream().
                map(f -> new Object[]{f}).
                toArray(Object[][]::new);
    }

    static final List<IntFunction<int[]>> INT_GENERATORS = List.of(
            withToString("int(i)", (int s) -> {
                return fill_int(s, i -> (int)(i^((i&1)-1)));
            })
    );

    @DataProvider
    public Object[][] intUnaryOpProvider() {
        return INT_GENERATORS.stream().
                map(f -> new Object[]{f}).
                toArray(Object[][]::new);
    }

    static final List<IntFunction<long[]>> LONG_GENERATORS = List.of(
            withToString("long(i)", (int s) -> {
                return fill_long(s, i -> (long)(i^((i&1)-1)));
            })
    );

    @DataProvider
    public Object[][] longUnaryOpProvider() {
        return LONG_GENERATORS.stream().
                map(f -> new Object[]{f}).
                toArray(Object[][]::new);
    }

    static final List<IntFunction<float[]>> FLOAT_GENERATORS = List.of(
            withToString("float(i)", (int s) -> {
                return fill_float(s, i -> (float)(i * 10 + 0.1));
            })
    );


    @DataProvider
    public Object[][] floatUnaryOpProvider() {
        return FLOAT_GENERATORS.stream().
                map(f -> new Object[]{f}).
                toArray(Object[][]::new);
    }

    static final List<IntFunction<double[]>> DOUBLE_GENERATORS = List.of(
            withToString("double(i)", (int s) -> {
                return fill_double(s, i -> (double)(i * 10 + 0.1));
            })
    );

    @DataProvider
    public Object[][] doubleUnaryOpProvider() {
        return DOUBLE_GENERATORS.stream().
                map(f -> new Object[]{f}).
                toArray(Object[][]::new);
    }


    public enum ConvAPI { CONVERT, CONVERTSHAPE, CASTSHAPE, REINTERPRETSHAPE };

    static <E> E[] getBoxedArray(Class<E> toClass, int len) {
       if(toClass.equals(Byte.class)) {
         byte[] b = new byte[len];
         return (E[])(getBoxedArray(b));
       } else if(toClass.equals(Short.class)) {
         short [] s = new short[len];
         return (E[])(getBoxedArray(s));
       } else if(toClass.equals(Integer.class)) {
         int[] i = new int[len];
         return (E[])(getBoxedArray(i));
       } else if(toClass.equals(Long.class)) {
         long[] l = new long[len];
         return (E[])(getBoxedArray(l));
       } else if(toClass.equals(Float.class)) {
         float[] f = new float[len];
         return (E[])(getBoxedArray(f));
       } else if(toClass.equals(Double.class)) {
         double[] d = new double[len];
         return (E[])(getBoxedArray(d));
       } else
         assert(false);
       return null;
    }

    static <E> void copyPrimArrayToBoxedArray(E [] boxed_arr, int index, List<?> arrL) {
      var arr = (arrL.get(0));
      if (boxed_arr instanceof Byte []) {
        byte [] barr = (byte[])arr;
        assert(boxed_arr.length >= index + barr.length);
        for(int i = 0 ; i < barr.length; i++)
           boxed_arr[i+index] = (E)Byte.valueOf(barr[i]);
      }
      else if (boxed_arr instanceof Short []) {
        short [] sarr = (short[])arr;
        assert(boxed_arr.length >= index + sarr.length);
        for(int i = 0 ; i < sarr.length; i++)
           boxed_arr[i+index] = (E)Short.valueOf(sarr[i]);
      }
      else if (boxed_arr instanceof Integer []) {
        int [] iarr = (int[])arr;
        assert(boxed_arr.length >= index + iarr.length);
        for(int i = 0 ; i < iarr.length; i++)
           boxed_arr[i+index] = (E)Integer.valueOf(iarr[i]);
      }
      else if (boxed_arr instanceof Long []) {
        long [] larr = (long[])arr;
        assert(boxed_arr.length >= index + larr.length);
        for(int i = 0 ; i < larr.length; i++)
           boxed_arr[i+index] = (E)Long.valueOf(larr[i]);
      }
      else if (boxed_arr instanceof Float []) {
        float [] farr = (float[])arr;
        assert(boxed_arr.length >= index + farr.length);
        for(int i = 0 ; i < farr.length; i++)
           boxed_arr[i+index] = (E)Float.valueOf(farr[i]);
      }
      else if (boxed_arr instanceof Double []) {
        double [] darr = (double[])arr;
        assert(boxed_arr.length >= index + darr.length);
        for(int i = 0 ; i < darr.length; i++)
           boxed_arr[i+index] = (E)Double.valueOf(darr[i]);
      }
      else
        assert(false);
    }

    static Byte[] getBoxedArray(byte[] arr) {
      Byte[] boxed_arr = new Byte[arr.length];
      for (int i = 0; i < arr.length; i++)
        boxed_arr[i] = Byte.valueOf(arr[i]);
      return boxed_arr;
    }
    static Short[] getBoxedArray(short[] arr) {
      Short[] boxed_arr = new Short[arr.length];
      for (int i = 0; i < arr.length; i++)
        boxed_arr[i] = Short.valueOf(arr[i]);
      return boxed_arr;
    }
    static Integer[] getBoxedArray(int[] arr) {
      Integer[] boxed_arr = new Integer[arr.length];
      for (int i = 0; i < arr.length; i++)
        boxed_arr[i] = Integer.valueOf(arr[i]);
      return boxed_arr;
    }
    static Long[] getBoxedArray(long[] arr) {
      Long[] boxed_arr = new Long[arr.length];
      for (int i = 0; i < arr.length; i++)
        boxed_arr[i] = Long.valueOf(arr[i]);
      return boxed_arr;
    }
    static Float[] getBoxedArray(float[] arr) {
      Float[] boxed_arr = new Float[arr.length];
      for (int i = 0; i < arr.length; i++)
        boxed_arr[i] = Float.valueOf(arr[i]);
      return boxed_arr;
    }
    static Double[] getBoxedArray(double[] arr) {
      Double[] boxed_arr = new Double[arr.length];
      for (int i = 0; i < arr.length; i++)
        boxed_arr[i] = Double.valueOf(arr[i]);
      return boxed_arr;
    }

    static <E> Number zeroValue(E to) {
      if (to.getClass().equals(Byte.class))
        return Byte.valueOf((byte)0);
      else if (to.getClass().equals(Short.class))
        return Short.valueOf((short)0);
      else if (to.getClass().equals(Integer.class))
        return Integer.valueOf(0);
      else if (to.getClass().equals(Long.class))
        return Long.valueOf((long)0);
      else if (to.getClass().equals(Float.class))
        return Float.valueOf((float)0);
      else if (to.getClass().equals(Double.class))
        return Double.valueOf((double)0);
      else
        assert (false);
      return null;
    }
    static <E , F > Number convertValue(E from, F to) {
      if (to.getClass().equals(Byte.class))
        return Byte.valueOf(((Number)from).byteValue());
      else if (to.getClass().equals(Short.class))
        return Short.valueOf(((Number)from).shortValue());
      else if (to.getClass().equals(Integer.class))
        return Integer.valueOf(((Number)from).intValue());
      else if (to.getClass().equals(Long.class))
        return Long.valueOf(((Number)from).longValue());
      else if (to.getClass().equals(Float.class))
        return Float.valueOf(((Number)from).floatValue());
      else if (to.getClass().equals(Double.class))
        return Double.valueOf(((Number)from).doubleValue());
      else
        assert (false);
      return null;
    }

    static <E> void putValue(ByteBuffer bb, E [] arr, int index) {
      if (arr[index].getClass().equals(Byte.class))
        bb.put(((Byte)(arr[index])).byteValue());
      else if (arr[index].getClass().equals(Short.class))
        bb.putShort(((Short)arr[index]).shortValue());
      else if (arr[index].getClass().equals(Integer.class))
        bb.putInt(((Integer)arr[index]).intValue());
      else if (arr[index].getClass().equals(Long.class))
        bb.putLong(((Long)arr[index]).longValue());
      else if (arr[index].getClass().equals(Float.class))
        bb.putFloat(((Float)arr[index]).floatValue());
      else if (arr[index].getClass().equals(Double.class))
        bb.putDouble(((Double)arr[index]).doubleValue());
      else
        assert (false);
    }

    static <F> Number getValue(ByteBuffer bb, Class<?> toClass) {
      if (toClass.equals(Byte.class))
        return (Number)(Byte.valueOf(bb.get()));
      else if (toClass.equals(Short.class))
        return (Number)(Short.valueOf(bb.getShort()));
      else if (toClass.equals(Integer.class))
        return (Number)(Integer.valueOf(bb.getInt()));
      else if (toClass.equals(Long.class))
        return (Number)(Long.valueOf(bb.getLong()));
      else if (toClass.equals(Float.class))
        return (Number)(Float.valueOf(bb.getFloat()));
      else if (toClass.equals(Double.class))
        return (Number)(Double.valueOf(bb.getDouble()));
      else
        assert (false);
      return null;
    }

    static <E , F > void
    expanding_reinterpret_scalar(E[] in, F[] out, int in_vec_size, int out_vec_size,
                                 int in_vec_lane_cnt, int out_vec_lane_cnt,
                                 int in_idx,  int out_idx, int part) {
      int SLICE_FACTOR = Math.max(in_vec_size, out_vec_size) / Math.min(in_vec_size, out_vec_size);
      int ELEMENTS_IN_SLICE = in_vec_lane_cnt / SLICE_FACTOR;
      assert (part < SLICE_FACTOR && part >= 0);
      int start_idx = in_idx + part * ELEMENTS_IN_SLICE;
      int end_idx = start_idx + ELEMENTS_IN_SLICE;
      var bb = ByteBuffer.allocate(out_vec_size);
      for (int i = start_idx; i < end_idx ; i++)
        putValue(bb, in, i);
      bb.rewind();
      Class<?> toClass = out[0].getClass();
      for (int i = 0; i < out_vec_lane_cnt; i++)
         out[i + out_idx] = (F)(VectorConversionTests.<F>getValue(bb, toClass));
    }

    static <E , F > void
    contracting_reinterpret_scalar(E[] in, F[] out, int in_vec_size, int out_vec_size,
                                   int in_vec_lane_cnt, int out_vec_lane_cnt,
                                   int in_idx,  int out_idx, int part) {
      int SLICE_FACTOR = Math.max(in_vec_size, out_vec_size) / Math.min(in_vec_size, out_vec_size);
      int ELEMENTS_OUT_SLICE = out_vec_lane_cnt / SLICE_FACTOR;
      assert (part > -SLICE_FACTOR && part <= 0);
      int start_idx = out_idx + (-part) * ELEMENTS_OUT_SLICE;
      int end_idx = start_idx + ELEMENTS_OUT_SLICE;
      for (int i = 0; i < out_vec_lane_cnt; i++)
        out[i+out_idx] = (F)(zeroValue(out[i]));
      var bb = ByteBuffer.allocate(in_vec_size);
      for (int i = 0; i < in_vec_lane_cnt; i++)
        putValue(bb, in, i + in_idx);
      bb.rewind();
      Class<?> toClass = out[0].getClass();
      for (int i = start_idx; i < end_idx; i++)
        out[i] =
            (F)(VectorConversionTests.<F>getValue(bb, toClass));
    }

    static <E , F > void
    expanding_conversion_scalar(E[] in, F[] out, int in_vec_len, int out_vec_len,
                                int in_idx,  int out_idx, int part) {
      int SLICE_FACTOR = Math.max(in_vec_len, out_vec_len) / Math.min(in_vec_len, out_vec_len);
      assert (part < SLICE_FACTOR && part >= 0);
      int start_idx = part * out_vec_len;
      for (int i = 0; i < out_vec_len; i++)
        out[i + out_idx] = (F)(VectorConversionTests.<E, F>convertValue(in[i + start_idx + in_idx], out[i + out_idx]));
    }

    static <E , F > void
    contracting_conversion_scalar(E[] in, F[] out, int in_vec_len, int out_vec_len,
                               int in_idx,  int out_idx, int part) {
      int SLICE_FACTOR = Math.max(out_vec_len, in_vec_len) / Math.min(out_vec_len, in_vec_len);
      assert (part > -SLICE_FACTOR && part <= 0);
      int start_idx = -part * in_vec_len;
      for (int i = 0; i < out_vec_len; i++)
        out[i+out_idx] = (F)(zeroValue(out[i+out_idx]));
      for (int i = 0; i < in_vec_len; i++)
        out[i + start_idx + out_idx] =
            (F)(VectorConversionTests.<E, F>convertValue(in[i+in_idx], out[i + start_idx+ out_idx]));
    }

    static int [] getPartsArray(int m , boolean is_contracting_conv) {
      int [] parts = new int[m];
      int part_init = is_contracting_conv ? -m+1 : 0;
      for(int i = 0; i < parts.length ; i++)
        parts[i] = part_init+i;
      return parts;
    }

    static <E> void assertResultsEquals(E[] ref, E[] res, int species_len) {
      Assert.assertEquals(res.length , ref.length);
      int TRIP_COUNT = res.length - (res.length & ~(species_len - 1));
      for (int i = 0; i < TRIP_COUNT; i++) {
        System.out.println("res[" + i + "] = " + res[i] + " ref[" + i +
                           "] = " + ref[i]);
        Assert.assertEquals(res[i], ref[i]);
      }
    }

    static Vector<?> vectorFactory(List<?> arrL, int sindex, VectorSpecies<?> SPECIES) {
       var arr = arrL.get(0);
       if (SPECIES.elementType().equals(byte.class))
         return ByteVector.fromArray((VectorSpecies<Byte>)(SPECIES), (byte[])(arr), sindex);
       else if (SPECIES.elementType().equals(short.class))
         return ShortVector.fromArray((VectorSpecies<Short>)(SPECIES), (short[])(arr), sindex);
       else if (SPECIES.elementType().equals(int.class))
         return IntVector.fromArray((VectorSpecies<Integer>)(SPECIES), (int[])(arr), sindex);
       else if (SPECIES.elementType().equals(long.class))
         return LongVector.fromArray((VectorSpecies<Long>)(SPECIES), (long[])(arr), sindex);
       else if (SPECIES.elementType().equals(float.class))
         return FloatVector.fromArray((VectorSpecies<Float>)(SPECIES), (float[])(arr), sindex);
       else if (SPECIES.elementType().equals(double.class))
         return DoubleVector.fromArray((VectorSpecies<Double>)(SPECIES), (double[])(arr), sindex);
       else
         assert(false);
       return null;
    }

    static <E,F,I,O> void conversion_kernel(VectorSpecies<?> SPECIES, VectorSpecies<?> OSPECIES,
                                            I[] boxed_a, O[] boxed_ref, O[] boxed_res, List<?> unboxed_a,
                                            VectorOperators.Conversion OP, ConvAPI API, int in_len) {
      int src_species_len = SPECIES.length();
      int dst_species_len = OSPECIES.length();
      boolean is_contracting_conv =  src_species_len * OSPECIES.elementSize() < OSPECIES.vectorBitSize();
      int m = Math.max(dst_species_len,src_species_len) / Math.min(src_species_len,dst_species_len);

      int [] parts = getPartsArray(m, is_contracting_conv);
      for (int ic = 0; ic < INVOC_COUNT; ic++) {
         for (int i=0, j=0; i < in_len; i += src_species_len, j+= dst_species_len) {
            int part = parts[i % parts.length];
            var av = VectorConversionTests.<I>vectorFactory(unboxed_a, i, SPECIES);
            F rv = null;
            switch(API) {
              default:
                assert(false);
                break;
              case CONVERT:
                rv = ((F)(av.convert(OP, part)));
                break;
              case CONVERTSHAPE:
                rv = ((F)(av.convertShape(OP, OSPECIES, part)));
                break;
              case CASTSHAPE:
                rv = ((F)(av.castShape(OSPECIES, part)));
                break;
            }
            copyPrimArrayToBoxedArray(boxed_res, j, Arrays.asList(((Vector)(rv)).toArray()));
            if (is_contracting_conv) {
              contracting_conversion_scalar(boxed_a, boxed_ref, src_species_len, dst_species_len, i, j, part);
            } else {
              expanding_conversion_scalar(boxed_a, boxed_ref, src_species_len, dst_species_len, i, j , part);
            }
         }
      }
      assertResultsEquals(boxed_res, boxed_ref, dst_species_len);
    }

    static <E,F,I,O> void reinterpret_kernel(VectorSpecies<?> SPECIES, VectorSpecies<?> OSPECIES,
                                            I[] boxed_a, O[] boxed_ref, O[] boxed_res, List<?> unboxed_a,
                                            int in_len) {
      int src_vector_size = SPECIES.vectorBitSize();
      int dst_vector_size = OSPECIES.vectorBitSize();
      int src_vector_lane_cnt = SPECIES.length();
      int dst_vector_lane_cnt = OSPECIES.length();
      boolean is_contracting_conv =  src_vector_size < dst_vector_size;
      int m = Math.max(dst_vector_size,src_vector_size) / Math.min(dst_vector_size, src_vector_size);

      int [] parts = getPartsArray(m, is_contracting_conv);
      for (int ic = 0; ic < INVOC_COUNT; ic++) {
        for (int i = 0, j=0; i < in_len; i += src_vector_lane_cnt, j+= dst_vector_lane_cnt) {
          int part = parts[i % parts.length];
          var av = VectorConversionTests.<I>vectorFactory(unboxed_a, i, SPECIES);
          F rv = (F)(av.reinterpretShape(OSPECIES, part));
          copyPrimArrayToBoxedArray(boxed_res, j, Arrays.asList(((Vector)(rv)).toArray()));
          if (is_contracting_conv) {
             contracting_reinterpret_scalar(boxed_a, boxed_ref, src_vector_size, dst_vector_size,
                                            src_vector_lane_cnt, dst_vector_lane_cnt, i, j, part);
          } else {
             expanding_reinterpret_scalar(boxed_a, boxed_ref, src_vector_size, dst_vector_size,
                                          src_vector_lane_cnt, dst_vector_lane_cnt, i, j, part);
          }
        }
      }
      assertResultsEquals(boxed_res, boxed_ref, dst_vector_lane_cnt);
    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2B_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2S_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2I_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2L_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2F_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2D_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec128, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec128, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec128, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec128, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec128, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec128, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec128, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec128, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec128, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec128, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec128, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec128, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec128, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec128, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec128, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec128, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec128, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec128, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec128, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec128, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_128_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_128_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_128_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_128_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_128_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2B_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2S_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2I_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2L_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2F_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2D_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec256, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec256, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec256, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec256, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec256, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec256, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec256, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec256, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec256, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec256, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec256, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec256, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec256, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec256, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec256, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec256, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec256, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec256, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec256, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec256, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_256_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_256_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_256_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_256_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_256_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2B_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2S_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2I_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2L_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2F_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2D_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec512, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec512, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec512, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec512, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec512, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec512, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec512, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec512, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec512, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec512, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec512, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec512, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec512, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec512, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec512, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec512, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec512, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec512, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec512, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec512, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_512_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_512_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_512_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_512_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_512_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2B_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2S_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2I_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2L_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2F_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2D_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec64, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec64, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec64, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec64, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec64, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec64, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec64, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec64, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec64, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec64, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec64, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec64, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec64, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec64, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec64, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec64, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec64, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec64, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec64, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec64, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_64_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_64_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_64_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_64_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_64_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2B_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2S_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2I_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2L_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2F_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertB2D_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2B_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2S_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2I_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2L_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2F_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void convertShapeB2D_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2B_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        conversion_kernel(bspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), B2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2S_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        conversion_kernel(bspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.B2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2I_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        conversion_kernel(bspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.B2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2L_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        conversion_kernel(bspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.B2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2F_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        conversion_kernel(bspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.B2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void castShapeB2D_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        conversion_kernel(bspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.B2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2B_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ByteVector,Byte,Byte>
        reinterpret_kernel(bspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2S_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,ShortVector,Byte,Short>
        reinterpret_kernel(bspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2I_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,IntVector,Byte,Integer>
        reinterpret_kernel(bspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2L_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,LongVector,Byte,Long>
        reinterpret_kernel(bspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2F_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,FloatVector,Byte,Float>
        reinterpret_kernel(bspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_Max_To_64(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_Max_To_128(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_Max_To_256(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_Max_To_512(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "byteUnaryOpProvider")
    static void reinterpretShapeB2D_Max_To_MAX(IntFunction<byte[]> fa) {
        byte[] a = fa.apply(1024);
        int olen =  (a.length / bspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ByteVector,DoubleVector,Byte,Double>
        reinterpret_kernel(bspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2B_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2S_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2I_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2L_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2F_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2D_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec128, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec128, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec128, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec128, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec128, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec128, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec128, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec128, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec128, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec128, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec128, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec128, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec128, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec128, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec128, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec128, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec128, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec128, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec128, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec128, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_128_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_128_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_128_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_128_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_128_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2B_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2S_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2I_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2L_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2F_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2D_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec256, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec256, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec256, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec256, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec256, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec256, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec256, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec256, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec256, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec256, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec256, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec256, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec256, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec256, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec256, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec256, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec256, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec256, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec256, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec256, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_256_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_256_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_256_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_256_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_256_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2B_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2S_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2I_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2L_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2F_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2D_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec512, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec512, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec512, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec512, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec512, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec512, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec512, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec512, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec512, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec512, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec512, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec512, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec512, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec512, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec512, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec512, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec512, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec512, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec512, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec512, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_512_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_512_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_512_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_512_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_512_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2B_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2S_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2I_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2L_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2F_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2D_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec64, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec64, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec64, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec64, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec64, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec64, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec64, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec64, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec64, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec64, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec64, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec64, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec64, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec64, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec64, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec64, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec64, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec64, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec64, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec64, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_64_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_64_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_64_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_64_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_64_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2B_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2S_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2I_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2L_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2F_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertD2D_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2B_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2S_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2I_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2L_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2F_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void convertShapeD2D_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2B_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        conversion_kernel(dspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.D2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2S_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        conversion_kernel(dspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.D2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2I_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        conversion_kernel(dspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.D2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2L_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        conversion_kernel(dspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.D2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2F_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        conversion_kernel(dspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.D2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void castShapeD2D_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        conversion_kernel(dspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), D2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2B_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ByteVector,Double,Byte>
        reinterpret_kernel(dspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2S_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,ShortVector,Double,Short>
        reinterpret_kernel(dspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2I_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,IntVector,Double,Integer>
        reinterpret_kernel(dspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2L_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,LongVector,Double,Long>
        reinterpret_kernel(dspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2F_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,FloatVector,Double,Float>
        reinterpret_kernel(dspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_Max_To_64(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_Max_To_128(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_Max_To_256(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_Max_To_512(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "doubleUnaryOpProvider")
    static void reinterpretShapeD2D_Max_To_MAX(IntFunction<double[]> fa) {
        double[] a = fa.apply(1024);
        int olen =  (a.length / dspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<DoubleVector,DoubleVector,Double,Double>
        reinterpret_kernel(dspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2B_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2S_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2I_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2L_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2F_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2D_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec128, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec128, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec128, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec128, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec128, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec128, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec128, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec128, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec128, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec128, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec128, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec128, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec128, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec128, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec128, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec128, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec128, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec128, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec128, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec128, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_128_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_128_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_128_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_128_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_128_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2B_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2S_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2I_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2L_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2F_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2D_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec256, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec256, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec256, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec256, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec256, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec256, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec256, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec256, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec256, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec256, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec256, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec256, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec256, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec256, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec256, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec256, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec256, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec256, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec256, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec256, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_256_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_256_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_256_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_256_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_256_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2B_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2S_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2I_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2L_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2F_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2D_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec512, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec512, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec512, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec512, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec512, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec512, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec512, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec512, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec512, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec512, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec512, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec512, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec512, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec512, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec512, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec512, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec512, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec512, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec512, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec512, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_512_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_512_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_512_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_512_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_512_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2B_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2S_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2I_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2L_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2F_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2D_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec64, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec64, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec64, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec64, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec64, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec64, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec64, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec64, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec64, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec64, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec64, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec64, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec64, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec64, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec64, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec64, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec64, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec64, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec64, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec64, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_64_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_64_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_64_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_64_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_64_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2B_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2S_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2I_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2L_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2F_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertF2D_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2B_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2S_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2I_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2L_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2F_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void convertShapeF2D_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2B_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        conversion_kernel(fspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.F2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2S_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        conversion_kernel(fspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.F2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2I_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        conversion_kernel(fspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.F2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2L_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        conversion_kernel(fspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.F2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2F_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        conversion_kernel(fspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), F2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void castShapeF2D_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        conversion_kernel(fspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.F2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2B_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ByteVector,Float,Byte>
        reinterpret_kernel(fspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2S_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,ShortVector,Float,Short>
        reinterpret_kernel(fspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2I_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,IntVector,Float,Integer>
        reinterpret_kernel(fspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2L_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,LongVector,Float,Long>
        reinterpret_kernel(fspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2F_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,FloatVector,Float,Float>
        reinterpret_kernel(fspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_Max_To_64(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_Max_To_128(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_Max_To_256(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_Max_To_512(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "floatUnaryOpProvider")
    static void reinterpretShapeF2D_Max_To_MAX(IntFunction<float[]> fa) {
        float[] a = fa.apply(1024);
        int olen =  (a.length / fspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<FloatVector,DoubleVector,Float,Double>
        reinterpret_kernel(fspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2B_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2S_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2I_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2L_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2F_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2D_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec128, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec128, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec128, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec128, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec128, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec128, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec128, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec128, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec128, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec128, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec128, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec128, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec128, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec128, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec128, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec128, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec128, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec128, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec128, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec128, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec128, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec128, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec128, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec128, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec128, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec128, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec128, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec128, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec128, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec128, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec128, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec128, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec128, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec128, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec128, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec128, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec128, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec128, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec128, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec128, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec128, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec128, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec128, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec128, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec128, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec128, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec128, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec128, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec128, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec128, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_128_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_128_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_128_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_128_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_128_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2B_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2S_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2I_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2L_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2F_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2D_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec256, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec256, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec256, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec256, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec256, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec256, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec256, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec256, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec256, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec256, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec256, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec256, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec256, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec256, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec256, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec256, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec256, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec256, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec256, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec256, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec256, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec256, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec256, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec256, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec256, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec256, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec256, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec256, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec256, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec256, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec256, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec256, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec256, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec256, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec256, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec256, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec256, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec256, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec256, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec256, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec256, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec256, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec256, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec256, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec256, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec256, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec256, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec256, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec256, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec256, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_256_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_256_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_256_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_256_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_256_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2B_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2S_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2I_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2L_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2F_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2D_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec512, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec512, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec512, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec512, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec512, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec512, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec512, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec512, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec512, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec512, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec512, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec512, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec512, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec512, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec512, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec512, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec512, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec512, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec512, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec512, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec512, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec512, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec512, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec512, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec512, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec512, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec512, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec512, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec512, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec512, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec512, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec512, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec512, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec512, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec512, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec512, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec512, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec512, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec512, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec512, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec512, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec512, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec512, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec512, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec512, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec512, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec512, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec512, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec512, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec512, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_512_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_512_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_512_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_512_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_512_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2B_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2S_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2I_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2L_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2F_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2D_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec64, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec64, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec64, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec64, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec64, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec64, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec64, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec64, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec64, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec64, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec64, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec64, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec64, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec64, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec64, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec64, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec64, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec64, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec64, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec64, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec64, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec64, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec64, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec64, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec64, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec64, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec64, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec64, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec64, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec64, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec64, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec64, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec64, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec64, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec64, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec64, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec64, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec64, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec64, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec64, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec64, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec64, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec64, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec64, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec64, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec64, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec64, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec64, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec64, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec64, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_64_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_64_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_64_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_64_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_64_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2B_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2S_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2I_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2L_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2F_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertI2D_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2B_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2S_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispecMax, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispecMax, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispecMax, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispecMax, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2I_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispecMax, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispecMax, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispecMax, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispecMax, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2L_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2F_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void convertShapeI2D_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2B_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        conversion_kernel(ispecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.I2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2S_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        conversion_kernel(ispecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.I2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispecMax, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispecMax, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispecMax, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispecMax, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2I_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        conversion_kernel(ispecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), I2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispecMax, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispecMax, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispecMax, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispecMax, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2L_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        conversion_kernel(ispecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.I2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2F_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        conversion_kernel(ispecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.I2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void castShapeI2D_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        conversion_kernel(ispecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.I2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2B_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ByteVector,Integer,Byte>
        reinterpret_kernel(ispecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2S_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,ShortVector,Integer,Short>
        reinterpret_kernel(ispecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispecMax, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispecMax, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispecMax, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispecMax, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2I_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,IntVector,Integer,Integer>
        reinterpret_kernel(ispecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispecMax, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispecMax, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispecMax, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispecMax, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2L_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,LongVector,Integer,Long>
        reinterpret_kernel(ispecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2F_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,FloatVector,Integer,Float>
        reinterpret_kernel(ispecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_Max_To_64(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_Max_To_128(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_Max_To_256(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_Max_To_512(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "intUnaryOpProvider")
    static void reinterpretShapeI2D_Max_To_MAX(IntFunction<int[]> fa) {
        int[] a = fa.apply(1024);
        int olen =  (a.length / ispecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<IntVector,DoubleVector,Integer,Double>
        reinterpret_kernel(ispecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2B_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2S_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2I_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2L_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2F_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2D_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec128, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec128, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec128, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec128, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec128, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec128, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec128, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec128, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec128, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec128, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec128, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec128, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec128, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec128, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec128, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec128, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec128, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec128, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec128, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec128, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_128_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_128_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_128_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_128_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_128_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2B_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2S_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2I_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2L_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2F_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2D_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec256, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec256, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec256, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec256, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec256, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec256, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec256, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec256, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec256, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec256, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec256, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec256, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec256, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec256, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec256, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec256, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec256, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec256, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec256, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec256, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_256_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_256_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_256_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_256_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_256_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2B_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2S_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2I_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2L_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2F_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2D_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec512, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec512, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec512, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec512, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec512, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec512, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec512, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec512, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec512, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec512, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec512, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec512, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec512, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec512, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec512, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec512, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec512, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec512, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec512, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec512, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_512_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_512_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_512_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_512_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_512_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2B_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2S_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2I_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2L_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2F_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2D_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec64, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec64, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec64, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec64, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec64, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec64, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec64, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec64, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec64, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec64, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec64, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec64, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec64, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec64, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec64, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec64, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec64, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec64, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec64, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec64, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_64_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_64_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_64_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_64_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_64_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2B_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2S_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2I_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2L_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2F_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertL2D_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2B_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2S_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2I_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2L_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2F_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void convertShapeL2D_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2B_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        conversion_kernel(lspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.L2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2S_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        conversion_kernel(lspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), VectorOperators.L2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2I_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        conversion_kernel(lspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.L2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2L_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        conversion_kernel(lspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), L2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2F_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        conversion_kernel(lspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.L2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void castShapeL2D_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        conversion_kernel(lspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.L2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2B_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ByteVector,Long,Byte>
        reinterpret_kernel(lspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2S_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,ShortVector,Long,Short>
        reinterpret_kernel(lspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2I_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,IntVector,Long,Integer>
        reinterpret_kernel(lspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2L_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,LongVector,Long,Long>
        reinterpret_kernel(lspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2F_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,FloatVector,Long,Float>
        reinterpret_kernel(lspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_Max_To_64(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_Max_To_128(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_Max_To_256(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_Max_To_512(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "longUnaryOpProvider")
    static void reinterpretShapeL2D_Max_To_MAX(IntFunction<long[]> fa) {
        long[] a = fa.apply(1024);
        int olen =  (a.length / lspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<LongVector,DoubleVector,Long,Double>
        reinterpret_kernel(lspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2B_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2S_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2I_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2L_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2F_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2D_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec128, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec128, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec128, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec128, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec128, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec128, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec128, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec128, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec128, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec128, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec128, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec128, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec128, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec128, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec128, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec128, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec128, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec128, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec128, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec128, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec128, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec128, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec128, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec128, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec128, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec128, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec128, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec128, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec128, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec128, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec128, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec128, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec128, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec128, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec128, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec128, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec128, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec128, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec128, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_128_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec128, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_128_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec128, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_128_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec128, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_128_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec128, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_128_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec128.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec128, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2B_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2S_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2I_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2L_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2F_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2D_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec256, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec256, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec256, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec256, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec256, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec256, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec256, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec256, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec256, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec256, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec256, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec256, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec256, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec256, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec256, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec256, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec256, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec256, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec256, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec256, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec256, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec256, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec256, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec256, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec256, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec256, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec256, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec256, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec256, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec256, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec256, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec256, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec256, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec256, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec256, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec256, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec256, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec256, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec256, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_256_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec256, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_256_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec256, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_256_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec256, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_256_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec256, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_256_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec256.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec256, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2B_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2S_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2I_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2L_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2F_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2D_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec512, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec512, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec512, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec512, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec512, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec512, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec512, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec512, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec512, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec512, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec512, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec512, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec512, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec512, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec512, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec512, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec512, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec512, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec512, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec512, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec512, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec512, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec512, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec512, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec512, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec512, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec512, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec512, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec512, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec512, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec512, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec512, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec512, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec512, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec512, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec512, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec512, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec512, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec512, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_512_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec512, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_512_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec512, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_512_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec512, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_512_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec512, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_512_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec512.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec512, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2B_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2S_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2I_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2L_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2F_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2D_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec64, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec64, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec64, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec64, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec64, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec64, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec64, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec64, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec64, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec64, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec64, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec64, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec64, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec64, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec64, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec64, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec64, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec64, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspec64, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec64, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec64, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec64, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec64, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspec64, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec64, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec64, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec64, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec64, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspec64, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec64, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec64, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec64, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec64, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspec64, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec64, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec64, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec64, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec64, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspec64, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_64_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec64, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_64_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec64, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_64_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec64, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_64_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec64, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_64_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspec64.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspec64, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }


    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2B_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2S_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2I_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2L_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2F_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertS2D_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERT, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2B_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2S_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2I_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2L_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2F_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void convertShapeS2D_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CONVERTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2B_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        conversion_kernel(sspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Byte.class, olen), 
                          getBoxedArray(Byte.class, olen), 
                          Arrays.asList(a), VectorOperators.S2B, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2S_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        conversion_kernel(sspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Short.class, olen), 
                          getBoxedArray(Short.class, olen), 
                          Arrays.asList(a), S2S, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2I_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        conversion_kernel(sspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Integer.class, olen), 
                          getBoxedArray(Integer.class, olen), 
                          Arrays.asList(a), VectorOperators.S2I, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2L_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        conversion_kernel(sspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Long.class, olen), 
                          getBoxedArray(Long.class, olen), 
                          Arrays.asList(a), VectorOperators.S2L, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2F_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        conversion_kernel(sspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Float.class, olen), 
                          getBoxedArray(Float.class, olen), 
                          Arrays.asList(a), VectorOperators.S2F, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void castShapeS2D_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        conversion_kernel(sspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                          getBoxedArray(Double.class, olen), 
                          getBoxedArray(Double.class, olen), 
                          Arrays.asList(a), VectorOperators.S2D, 
                          ConvAPI.CASTSHAPE, a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspecMax, ByteVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspecMax, ByteVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspecMax, ByteVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspecMax, ByteVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2B_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ByteVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ByteVector,Short,Byte>
        reinterpret_kernel(sspecMax, ByteVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Byte.class, olen), 
                           getBoxedArray(Byte.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspecMax, ShortVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspecMax, ShortVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspecMax, ShortVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspecMax, ShortVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2S_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * ShortVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,ShortVector,Short,Short>
        reinterpret_kernel(sspecMax, ShortVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Short.class, olen), 
                           getBoxedArray(Short.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspecMax, IntVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspecMax, IntVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspecMax, IntVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspecMax, IntVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2I_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * IntVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,IntVector,Short,Integer>
        reinterpret_kernel(sspecMax, IntVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Integer.class, olen), 
                           getBoxedArray(Integer.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspecMax, LongVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspecMax, LongVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspecMax, LongVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspecMax, LongVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2L_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * LongVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,LongVector,Short,Long>
        reinterpret_kernel(sspecMax, LongVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Long.class, olen), 
                           getBoxedArray(Long.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspecMax, FloatVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspecMax, FloatVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspecMax, FloatVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspecMax, FloatVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2F_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * FloatVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,FloatVector,Short,Float>
        reinterpret_kernel(sspecMax, FloatVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Float.class, olen), 
                           getBoxedArray(Float.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_Max_To_64(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_64.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspecMax, DoubleVector.SPECIES_64, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_Max_To_128(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_128.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspecMax, DoubleVector.SPECIES_128, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_Max_To_256(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_256.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspecMax, DoubleVector.SPECIES_256, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_Max_To_512(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_512.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspecMax, DoubleVector.SPECIES_512, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }

    @Test(dataProvider = "shortUnaryOpProvider")
    static void reinterpretShapeS2D_Max_To_MAX(IntFunction<short[]> fa) {
        short[] a = fa.apply(1024);
        int olen =  (a.length / sspecMax.length()) * DoubleVector.SPECIES_MAX.length(); 
        VectorConversionTests.<ShortVector,DoubleVector,Short,Double>
        reinterpret_kernel(sspecMax, DoubleVector.SPECIES_MAX, getBoxedArray(a),
                           getBoxedArray(Double.class, olen), 
                           getBoxedArray(Double.class, olen), 
                           Arrays.asList(a), a.length);

    }
}
